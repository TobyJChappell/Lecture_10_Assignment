p
p + geom_point() + stat_echo(data=iris[!Is_Versicolor, ],size=.1)
p <- ggplot(iris[Is_Versicolor, ],aes(x=Sepal.Width,y=Sepal.Length)) + geom_point(size=3)
p + geom_point() + stat_echo(data=iris[!Is_Versicolor, ],size=.1)
p <- ggplot(iris[Is_Versicolor, ],aes(x=Sepal.Width,y=Sepal.Length)) + geom_point(size=2)
p + geom_point() + stat_echo(data=iris[!Is_Versicolor, ],size=.1)
p <- ggplot(iris[Is_Versicolor, ],aes(x=Sepal.Width,y=Sepal.Length)) + geom_point(size=2.5)
p + geom_point() + stat_echo(data=iris[!Is_Versicolor, ],size=.1)
library(ggplot2)
Is_Versicolor <- iris$Species == "versicolor"
iris_plot <- ggplot(iris,aes(x=Sepal.Width,y=Sepal.Length))
iris_plot + geom_point(aes(shape=Is_Versicolor))
iris_plot + geom_point(aes(color=Is_Versicolor)) +
scale_color_manual(breaks = c(FALSE, TRUE), values=c(hsv(.5,1,.25), hsv(.5,1,.75)))
#remotes::install_github("coolbutuseless/ggecho")
library(ggecho)
blur <- ggplot(iris[Is_Versicolor, ],aes(x=Sepal.Width,y=Sepal.Length)) + geom_point(size=2.5)
blur + geom_point() + stat_echo(data=iris[!Is_Versicolor, ],size=.1)
#PART 2
iris_plot + geom_point(aes(color=Species))
#PART 2
iris_plot + geom_point(aes(color=Species)) +
scale_color_manual(breaks = c("setosa", "versicolor", "virginica"), values=c(hsv(.25,1,.25), hsv(.5,1,.5), hsv(.75,1,.75)))
#PART 2
iris_plot + geom_point(aes(color=Species)) +
scale_color_manual(breaks = c("setosa", "versicolor", "virginica"), values=c(hsv(.15,1,.15), hsv(.5,1,.5), hsv(.85,1,.85)))
#PART 2
iris_plot + geom_point(aes(color=Species,size=Species)) +
scale_color_manual(breaks = c("setosa", "versicolor", "virginica"), values=c(hsv(.15,1,.15), hsv(.5,1,.5), hsv(.85,1,.85)))
iris_plot + geom_point(aes(color=Species,shape=Species)) +
scale_color_manual(breaks = c("setosa", "versicolor", "virginica"), values=c(hsv(.15,1,.15), hsv(.5,1,.5), hsv(.85,1,.85)))
iris_plot + geom_point(aes(color=Species,shape=Species)) +
scale_color_manual(breaks = c("setosa", "versicolor", "virginica"), values=c(hsv(.5,1,.15), hsv(.5,1,.5), hsv(.5,1,.85)))
library(ggplot2)
library(reshape2)
library(dplyr)  # required for arrange()
library(colorspace)
library(viridis)
library(maps) # for the state map data
library(mapproj)
murder_rates <- read.csv(file = 'MurderRate.csv')
murder_rates$state <- tolower(murder_rates$state)
states_map<-map_data("state") #extracts data from the states map
crimes<-data.frame(state=tolower(rownames(USArrests)),USArrests)
crimes<-merge(crimes,murder_rates,by="state")
crime_map<-merge(states_map,crimes,by.x="region",by.y="state")
crime_map<-arrange(crime_map,group,order)
c = hsv((max(crime_map$Murder)-crime_map$Murder)/(max(crime_map$Murder)-min(crime_map$Murder))/7,(crime_map$Murder-min(crime_map$Murder))/(max(crime_map$Murder)-min(crime_map$Murder)),1)
c2 = hsv(1/7,1,1)
c3 = hsv(0,0,1)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c)
#scale_fill_gradientn(colours=c)
min(C)
min(c)
scale_fill_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c) +
scale_fill_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
#geom_polygon(fill=c) +
scale_fill_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
#geom_polygon(fill=c) +
scale_fill_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
scale_fill_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group,fill=c)) +
coord_map("polyconic") +
#geom_polygon(fill=c) +
scale_fill_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c) +
scale_fill_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c) +
scale_fill_manual(values=c)
ggplot(crime_map,aes(x=long,y=lat,group=group,fill=c)) +
coord_map("polyconic") +
geom_polygon(fill=c) +
scale_fill_manual(values=c)
ggplot(c)+scale_fill_gradient(low=min(c),high=max(c))
ggplot(crime_map)+scale_fill_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group))+scale_fill_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group))+coord_map("polyconic")+scale_fill_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group,fill=c))+coord_map("polyconic")+scale_fill_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c)
scale_color_gradient(low=min(c),high=max(c))
scale_color_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c) +scale_color_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=c)) + scale_color_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c) + scale_color_gradient(low=min(c),high=max(c))
scale_color_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=c)) +
scale_fill_gra(colors=c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=c)) +
scale_fill_gradientn(colors=c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(Murder)) +
scale_fill_gradientn(colors=c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(crime_map$Murder)) +
scale_fill_gradientn(colors=c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradientn(colors=c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradient(colors=c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradient(colors=c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradient(low=max(c),high=min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
#scale_fill_gradient(low=max(c),high=min(c))
scale_color_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradient(low=max(c),high=min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c)
c = hsv((max(crime_map$Murder)-crime_map$Murder)/(max(crime_map$Murder)-min(crime_map$Murder))/7,(crime_map$Murder-min(crime_map$Murder))/(max(crime_map$Murder)-min(crime_map$Murder)),.75)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c)
c = hsv((max(crime_map$Murder)-crime_map$Murder)/(max(crime_map$Murder)-min(crime_map$Murder))/7,(crime_map$Murder-min(crime_map$Murder))/(max(crime_map$Murder)-min(crime_map$Murder)),.95)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradient(low=max(c),high=min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_color_gradient(low=max(c),high=min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradient(low=max(c),high=min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
#scale_fill_gradient(low=max(c),high=min(c)) +
scale_fill_gradientn(colours=c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
#scale_fill_gradient(low=max(c),high=min(c))
scale_fill_gradientn(colours=1-c)
#scale_fill_gradient(low=max(c),high=min(c))
scale_fill_gradientn(colours=#FFFFFF-c)
coord_map("polyconic") +
we
wer
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
#scale_fill_gradient(low=max(c),high=min(c))
scale_fill_gradientn(colours=FFFFFF-c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
#scale_fill_gradient(low=max(c),high=min(c))
scale_fill_gradientn(colours=FFFFFF-c)
c
#scale_fill_gradient(low=max(c),high=min(c))
scale_fill_gradientn(colours=max(c_-c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
#scale_fill_gradient(low=max(c),high=min(c))
scale_fill_gradientn(colours=max(c)-c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
#scale_fill_gradient(low=max(c),high=min(c))
scale_fill_gradientn(colours=max(c)-c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradient(low=max(c),high=min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c)
library(ggplot2)
library(reshape2)
library(dplyr)  # required for arrange()
library(colorspace)
library(viridis)
library(maps) # for the state map data
library(mapproj)
murder_rates <- read.csv(file = 'MurderRate.csv')
murder_rates$state <- tolower(murder_rates$state)
states_map<-map_data("state") #extracts data from the states map
crimes<-data.frame(state=tolower(rownames(USArrests)),USArrests)
crimes<-merge(crimes,murder_rates,by="state")
crime_map<-merge(states_map,crimes,by.x="region",by.y="state")
crime_map<-arrange(crime_map,group,order)
c = hsv((max(crime_map$Murder)-crime_map$Murder)/(max(crime_map$Murder)-min(crime_map$Murder))/7,(crime_map$Murder-min(crime_map$Murder))/(max(crime_map$Murder)-min(crime_map$Murder)),.95)
# ggplot(crime_map,aes(x=long,y=lat,group=group)) +
#   coord_map("polyconic") +
#   geom_polygon(aes(fill=Murder)) +
#   scale_fill_gradient(low=max(c),high=min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c,show.legend = TRUE)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c,aes(show.legend = TRUE))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c,show.legend = TRUE)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradient(low=max(c),high=min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c,show.legend = TRUE)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradientn(colors = c(max(c),(max(c)+min(c))/2,min)c)
scale_fill_gradientn(colors = c(max(c),(max(c)+min(c))/2,min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradientn(colors = c(max(c),(max(c)+min(c))/2,min(c)))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradientn(colors = c(max(c),(max(c)+min(c))/2,min(c)))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradientn(colors = c(max(c),hsv(1/14,.5,.95),min(c)))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c,show.legend = TRUE)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradientn(colors = c(max(c),hsv(1/14,.5,.95),min(c)))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c) +
scale_fill_gradientn(colors = c(max(c),hsv(1/14,.5,.95),min(c)))
ggplot(crime_map,aes(x=long,y=lat,group=group,fill=Murder)) +
coord_map("polyconic") +
geom_polygon(fill=c) +
scale_fill_gradientn(colors = c(max(c),hsv(1/14,.5,.95),min(c)))
ggplot(crime_map,aes(x=long,y=lat,group=group,fill=Murder)) +
coord_map("polyconic") +
geom_polygon(fill=c,aes(fill=Murder)) +
scale_fill_gradientn(colors = c(max(c),hsv(1/14,.5,.95),min(c)))
ggplot(crime_map,aes(x=long,y=lat,group=group,fill=Murder)) +
coord_map("polyconic") +
geom_polygon() +
scale_fill_gradientn(colors = c(max(c),hsv(1/14,.5,.95),min(c)))
source('~/Documents/CS_Courses/CS_710/Color/USArrests.R', echo=TRUE)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c)
library(ggplot2)
library(patchwork)
d1=expand.grid(h=seq(0,1,1/12), s=seq(0,1,1/7), v=seq(0,1,1/7))
d2=expand.grid(h=seq(0,1,1/12), s=seq(0,1,1/7), v=seq(0,1,1/7))
d=expand.grid(h=seq(0,0.95,0.05), s=seq(0,0.95,0.05), v=seq(0,1,0.2))
p1=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v)))
p2=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))
p3=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v))) +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))+
geom_smooth()
stacked_plots <- p1 + p2+p3 + plot_layout(ncol = 1)
stacked_plots
library(ggplot2)
library(patchwork)
d1=expand.grid(h=seq(0,1,1/12), s=seq(0,1,1/7), v=seq(0,1,1/7))
d2=expand.grid(h=seq(0,1,1/12), s=seq(0,1,1/7), v=seq(0,1,1/7))
d=expand.grid(h=seq(0,0.95,0.05), s=seq(0,0.95,0.05), v=seq(0,1,0.2))
p1=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v)))
p2=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))
p3=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v))) +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))+
geom_smooth()
stacked_plots <- p1 + p2+p3 + plot_layout(ncol = 1)
stacked_plots
install.packages("patchwork")
library(ggplot2)
library(patchwork)
d1=expand.grid(h=seq(0,1,1/12), s=seq(0,1,1/7), v=seq(0,1,1/7))
d2=expand.grid(h=seq(0,1,1/12), s=seq(0,1,1/7), v=seq(0,1,1/7))
d=expand.grid(h=seq(0,0.95,0.05), s=seq(0,0.95,0.05), v=seq(0,1,0.2))
p1=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v)))
p2=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))
p3=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v))) +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))+
geom_smooth()
stacked_plots <- p1 + p2+p3 + plot_layout(ncol = 1)
stacked_plots
stacked_plots
library(ggplot2)
library(viridis)
#install.packages("dplyr")
library(dplyr)
diamonds <- read.csv(file = 'diamonds.csv')
diamonds <- diamonds %>% rename(Cut=cut, Clarity=clarity)
setwd("~/Documents/CS_Courses/CS_710/Lecture_10_Assignment")
diamonds <- read.csv(file = 'diamonds.csv')
diamonds <- diamonds %>% rename(Cut=cut, Clarity=clarity)
diamonds$Cut <- factor(diamonds$Cut,levels=c("Fair","Good","Very Good","Premium","Ideal"))
diamonds$Clarity <- factor(diamonds$Clarity,levels=c("I1", "SI2", "SI1", "VS2", "VS1", "VVS2", "VVS1", "IF"))
cut_group <- diamonds %>% group_by(Cut) %>%
summarise(count = n()) %>%
mutate(per=count/sum(count)) %>%
ungroup()
clarity_group <- diamonds %>% group_by(Clarity,Cut) %>%
summarise(count = n()) %>%
group_by(Clarity) %>%
mutate(per=count/sum(count)) %>%
ungroup()
#Side-by-Side Bars
ggplot(data=diamonds,aes(x=Cut,fill=Cut)) +
geom_bar() +
ggtitle("Proportion of Diamonds by Cut") +
ylab(label="Number of Diamonds") +
scale_fill_viridis_d()
#Stacked Bar
ggplot(data=cut_group,aes(x="",y=per,fill=Cut)) +
geom_bar(stat="identity") +
xlab("") +
ylab("Percent") +
ggtitle("Proportion of Diamonds by Cut") +
scale_y_continuous(labels = scales::percent) +
scale_fill_viridis_d()
#Pie
ggplot(cut_group, aes(x= "", y = per, fill=Cut)) +
geom_col() +
coord_polar("y", start=0) +
ggtitle("Proportion of Diamonds by Cut") +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
scale_fill_viridis_d()
#Side-by-Side Bars (Quantity)
ggplot(data=diamonds,aes(x=Clarity,fill=Cut)) +
geom_bar(position="dodge") +
xlab("Clarity") +
ylab("Number of Diamonds") +
ggtitle("Proportion of Diamonds by Cut for each Clarity") +
scale_fill_viridis_d()
#Side-by-Side Bars (Percent)
ggplot(data=clarity_group,aes(x=Clarity,y=per,fill=Cut)) +
geom_bar(stat="identity",position="dodge") +
xlab("Clarity") +
ylab("Percent") +
ggtitle("Proportion of Diamonds by Cut for each Clarity") +
scale_y_continuous(labels = scales::percent) +
scale_fill_viridis_d()
#Stacked Bars (Quantity)
ggplot(data=diamonds,aes(x=Clarity,y="",fill=Cut)) +
geom_bar(stat="identity") +
xlab("Clarity") +
ylab("Number of Diamonds") +
ggtitle("Proportion of Diamonds by Cut for each Clarity") +
scale_fill_viridis_d()
#Stacked Bars (Percent)
ggplot(data=clarity_group,aes(x=Clarity,y=per,fill=Cut)) +
geom_bar(stat="identity") +
xlab("Clarity") +
ylab("Percent") +
ggtitle("Proportion of Diamonds by Cut for each Clarity") +
scale_y_continuous(labels = scales::percent) +
scale_fill_viridis_d()
#Pie Charts
ggplot(clarity_group, aes(x= "", y = per, fill=Cut)) +
geom_col() +
coord_polar("y", start=0) +
facet_wrap(~Clarity)  +
ggtitle("Proportion of Diamonds by Cut for each Clarity") +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
scale_fill_viridis_d()
#Stacked Bars (Quantity)
ggplot(data=diamonds,aes(x=Clarity,y="",fill=Cut)) +
geom_bar(stat="identity") +
xlab("Clarity") +
ylab("Number of Diamonds") +
ggtitle("Proportion of Diamonds by Cut for each Clarity") +
scale_fill_viridis_d()
#Side-by-Side Bars (Percent)
ggplot(data=clarity_group,aes(x=Clarity,y=per,fill=Cut)) +
geom_bar(stat="identity",position="dodge") +
xlab("Clarity") +
ylab("Percent") +
ggtitle("Proportion of Diamonds by Cut for each Clarity") +
scale_y_continuous(labels = scales::percent) +
scale_fill_viridis_d()
#Stacked Bars (Quantity)
ggplot(data=diamonds,aes(x=Clarity,y="",fill=Cut)) +
geom_bar(stat="identity") +
xlab("Clarity") +
ylab("Number of Diamonds") +
ggtitle("Proportion of Diamonds by Cut for each Clarity") +
scale_fill_viridis_d()
#Stacked Bar
ggplot(data=cut_group,aes(x="",y=per,fill=Cut)) +
geom_bar(stat="identity") +
xlab("") +
ylab("Percent") +
ggtitle("Proportion of Diamonds by Cut") +
scale_y_continuous(labels = scales::percent) +
scale_fill_viridis_d()
#Pie
ggplot(cut_group, aes(x= "", y = per, fill=Cut)) +
geom_col() +
coord_polar("y", start=0) +
ggtitle("Proportion of Diamonds by Cut") +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
scale_fill_viridis_d()
